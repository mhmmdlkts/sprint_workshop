// Generated by CoffeeScript 1.3.3
(function() {
  var Char, Stage, socketio;

  Stage = (function() {

    function Stage() {
      var x, y, _base, _base1, _i, _j;
      this.map = [];
      this.flow = [];
      this.char = {};
      this.diffA = [];
      this.diffD = [];
      this.charCanStay = [];
      for (y = _i = 0; _i <= 20; y = ++_i) {
        this.map[y] = [];
        this.flow[y] = [];
        for (x = _j = 0; _j <= 20; x = ++_j) {
          (_base = this.map[y])[x] || (_base[x] = null);
          (_base1 = this.flow[y])[x] || (_base1[x] = null);
          if ((x % 2 === 1) && (y % 2 === 1)) {
            this.map[y][x] = 's';
          } else {
            this.map[y][x] = 'g';
            if (Math.random() <= 0.3) {
              this.flow[y][x] = 'b';
            } else {
              this.charCanStay.push({
                x: x,
                y: y
              });
            }
          }
        }
      }
    }

    Stage.prototype.bornChar = function(id) {
      var pos;
      pos = this.charCanStay[parseInt(Math.random() * this.charCanStay.length)];
      return this.char[id] = new Char(this, pos.x, pos.y);
    };

    Stage.prototype.deadChar = function(id) {
      return delete this.char[id];
    };

    Stage.prototype.isEmpty = function(x, y) {
      var _ref, _ref1;
      if ((_ref = this.map[y][x]) === 's') {
        return false;
      }
      if ((_ref1 = this.flow[y][x]) === 'b' || _ref1 === 'o') {
        return false;
      }
      return true;
    };

    Stage.prototype.getChar = function() {
      var id, obj, ret, _ref;
      ret = {};
      _ref = this.char;
      for (id in _ref) {
        obj = _ref[id];
        ret[id] = {
          x: obj.x,
          y: obj.y
        };
      }
      return ret;
    };

    Stage.prototype.getFlowDiff = function() {
      var ret;
      ret = {
        add: this.diffA,
        "delete": this.diffD
      };
      this.diffA = [];
      this.diffD = [];
      return ret;
    };

    Stage.prototype.putBomb = function(x, y) {
      this.flow[y][x] = 'o';
      return this.diffA.push({
        x: x,
        y: y,
        type: 'o'
      });
    };

    return Stage;

  })();

  Char = (function() {

    function Char(stage, x, y) {
      this.stage = stage;
      this.x = x;
      this.y = y;
      this.bomb = 0;
    }

    Char.prototype.move = function(x, y) {
      if (this.stage.isEmpty(this.x + x, this.y + y) && this.x + x <= 20 && this.y + y <= 20 && 0 <= this.x + x && 0 <= this.y + y) {
        this.x += x;
        return this.y += y;
      }
    };

    Char.prototype.putBomb = function() {
      if (this.bomb <= 3) {
        return this.stage.putBomb(this.x, this.y);
      }
    };

    return Char;

  })();

  global.stage = new Stage();

  socketio = require('socket.io').listen(global.app);

  socketio.on('connection', function(socket) {
    var charId;
    socket.on('message', function(val) {
      var char;
      char = global.stage.char[socket.id];
      if (typeof char === 'undefined') {
        return;
      }
      if (val === 'l') {
        char.move(-1, 0);
      }
      if (val === 'r') {
        char.move(1, 0);
      }
      if (val === 'u') {
        char.move(0, -1);
      }
      if (val === 'd') {
        char.move(0, 1);
      }
      if (val === 's') {
        return char.putBomb();
      }
    });
    socket.on('disconnect', function(v) {
      return global.stage.deadChar(socket.id);
    });
    if (typeof global.timer === 'undefined') {
      global.timer = setInterval(function() {
        var diff;
        return diff = socket.broadcast.emit('stage sync', {
          flow: global.stage.getFlowDiff(),
          char: global.stage.getChar()
        });
      }, 100);
    }
    charId = global.stage.bornChar(socket.id);
    return socket.emit('stage init', {
      map: global.stage.map,
      flow: global.stage.flow,
      char: global.stage.getChar()
    });
  });

}).call(this);
